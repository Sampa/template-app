<?php

/**
 * Test class for WFormRelation.
 * Generated by PHPUnit on 2012-01-20 at 14:36:47.
 */
class WFormRelationTest extends PHPUnit_Framework_TestCase
{

	/**
	 * @covers WFormRelation::getInstance
	 */
	public function testGetInstance()
	{
		$model = $this->getModelMock();

		$model->expects($this->any())
				->method('setOptions');

		$options = array(
			'required' => true,
			'type' => 'someUnexpectedType'
		);

		// for 'relations' => array('someRelation' => array(..options..))
		$this->assertInstanceOf('WFormRelationHasOne', WFormRelation::getInstance($model, 'hasOne', $options));
		$this->assertInstanceOf('WFormRelationHasMany', WFormRelation::getInstance($model, 'hasMany', $options));
		$this->assertInstanceOf('WFormRelationManyMany', WFormRelation::getInstance($model, 'manyMany', $options));
		$this->assertInstanceOf('WFormRelationBelongsTo', WFormRelation::getInstance($model, 'belongsTo', $options));
		$this->assertNull(WFormRelation::getInstance($model, 'stat', $options));
		$this->assertNull(WFormRelation::getInstance($model, 'misteriousRelation', $options));

		// for 'relations' => array('someRelation','someOtherRelation')
		$this->assertInstanceOf('WFormRelationHasOne', WFormRelation::getInstance($model, 0, 'hasOne'));
		$this->assertInstanceOf('WFormRelationHasMany', WFormRelation::getInstance($model, 1, 'hasMany'));
		$this->assertInstanceOf('WFormRelationManyMany', WFormRelation::getInstance($model, 2, 'manyMany'));
		$this->assertInstanceOf('WFormRelationBelongsTo', WFormRelation::getInstance($model, 3, 'belongsTo'));
		$this->assertNull(WFormRelation::getInstance($model, 4, 'stat'));
		$this->assertNull(WFormRelation::getInstance($model, 5, 'misteriousRelation'));

		$relation =  WFormRelation::getInstance($model, 'hasOne', $options);

		$this->assertAttributeNotEmpty('name', $relation);
		$this->assertAttributeNotEmpty('info', $relation);
		$this->assertAttributeNotEmpty('type', $relation);
		$this->assertAttributeNotEmpty('model', $relation);
	}

	/**
	 * @covers WFormRelation::setOption
	 */
	public function testSetOptions()
	{
		$relation = new WFormRelation();

		$relation->setOptions(array(
			'required' => true,
			'unsetInvalid' => true,
			'name' => 'someName', // shouldn't affect
			'info' => 'someInfo', // shouldn't affect
			'type' => 'someType', // shouldn't affect
			'model' => 'someModel', // shouldn't affect
		));

		$this->assertTrue($relation->required);
		$this->assertTrue($relation->unsetInvalid);

		$this->assertAttributeEmpty('name', $relation);
		$this->assertAttributeEmpty('info', $relation);
		$this->assertAttributeEmpty('type', $relation);
		$this->assertAttributeEmpty('model', $relation);

	}

	/**
	 * @covers WFormRelation::getRelationInfo
	 */
	public function testGetRelationInfo()
	{
		$model = $this->getModelMock();

		$this->assertNotNull(WFormRelation::getRelationInfo($model, 'hasOne'));
		$this->assertNotNull(WFormRelation::getRelationInfo($model, 'hasMany'));
		$this->assertNotNull(WFormRelation::getRelationInfo($model, 'manyMany'));
		$this->assertNotNull(WFormRelation::getRelationInfo($model, 'belongsTo'));
		$this->assertNotNull(WFormRelation::getRelationInfo($model, 'stat'));
		$this->assertNull(WFormRelation::getRelationInfo($model, 'misteriousRelation'));
	}

	private function getModelMock() {
		$model = $this->getMockBuilder('CActiveRecord')
						->disableOriginalConstructor()
						->getMock();

		$model->expects($this->any())
				->method('relations')
				->will($this->returnValue(array(
					'hasOne' => array(CActiveRecord::HAS_ONE, 'SomeModel', 'key'),
					'hasMany' => array(CActiveRecord::HAS_MANY, 'SomeModel', 'key'),
					'manyMany' => array(CActiveRecord::MANY_MANY, 'SomeModel', 'key'),
					'belongsTo' => array(CActiveRecord::BELONGS_TO, 'SomeModel', 'key'),
					'stat' => array(CActiveRecord::STAT, 'SomeModel', 'key'),
		)));

		return $model;
	}
}