<?php

/**
 * Test class for WFormRelationHasOne.
 * Generated by PHPUnit on 2012-01-20 at 15:03:39.
 */
class WFormRelationHasOneTest extends PHPUnit_Framework_TestCase
{
	private $_connection;


	protected function setUp()
	{
		if(!extension_loaded('pdo') || !extension_loaded('pdo_sqlite'))
			$this->markTestSkipped('PDO and SQLite extensions are required.');

		$this->_connection = new CDbConnection('sqlite::memory:');
		$this->_connection->active = true;
		$this->_connection->pdoInstance->exec(file_get_contents(dirname(__FILE__).'/../fixtures/data/sqlite.sql'));
		CActiveRecord::$db = $this->_connection;
	}


	protected function tearDown()
	{
		$this->_connection->active=false;
	}

	/**
	 * @covers WFormRelationHasOne::setAttributes
	 */
	public function testSetAttributes()
	{
		$product = $this->_getProductWithRelation();

		$product->attributes = array(
			'name' => 'product_name',
			'description' => array(
				'size' => '12',
			),
		);

		$this->assertNotEmpty($product->description);
		$this->assertEquals('12', $product->description->size);

		$product->attributes = array(
			'name' => 'product_name',
		);
		$this->assertNotEmpty($product->description);

		$product->attributes = array(
			'name' => 'product_name',
			'description' => array(),
		);
		$this->assertTrue($product->description->isNewRecord);

		$product = $this->_getProductWithRelation(1);
		$this->assertNotEmpty($product->description);

		$product->attributes = array(
			'name' => 'product_name',
			'description' => array(
				'id' => 1,
			),
		);

		$this->assertNotEmpty($product->description);
		// check if exists description just updated
		$this->assertEquals('100x100', $product->description->size);
	}

	/**
	 * @covers WFormRelationHasOne::validate
	 * @dataProvider validateProvider
	 */
	public function testValidate($expectedResult, $relationOptions, $relationAttribute, $onFailComment = "")
	{
		$product = $this->_getProductWithRelation(null, $relationOptions);

		$product->attributes = array(
			'name' => 'product_name',
			'description' => $relationAttribute,
		);

		$this->assertEquals($expectedResult, $product->validate(), $onFailComment);
	}

	public function validateProvider()
	{
		return array(
			// required=true
			array(
				'result' => true,
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(
					'size' => '12x12'
				),
				'comment' => 'required, 1 valid related object'
			),
			array(
				'result' => false,
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(
					'size' => ''
				),
				'comment' => 'required, 1 invalid related object'
			),
			array(
				'result' => false,
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(),
				'comment' => 'required, 0 related objects'
			),
			// required=false
			array(
				'result' => true,
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'size' => '12x12'
				),
				'comment' => 'not required, 1 valid related object'
			),
			array(
				'result' => false,
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'size' => ''
				),
				'comment' => 'not required, 1 invalid related objects'
			),
			array(
				'result' => true,
				'relationOptions' => array('required' => false),
				'relationAttribute' => null,
				'comment' => 'not required, 0 related objects'
			),
		);
	}

	/**
	 * @covers WFormRelationHasOne::save
	 * @dataProvider saveProvider
	 */
	public function testSave($expectedResult, $relationOptions, $relationAttribute, $onFailComment = "")
	{
		$product = $this->_getProductWithRelation(null, $relationOptions);

		$product->attributes = array(
			'name' => 'product_name',
			'description' => $relationAttribute,
		);

		$this->assertEquals($expectedResult['saved'], $product->save(), $onFailComment);
		if ($expectedResult['relationsCount'] > 0) {
			$this->assertNotEmpty($product->description, $onFailComment);
		} else {
			$this->assertEmpty($product->description, $onFailComment);
		}

	}

	public function saveProvider()
	{
		return array(
			// required=true
			array(
				'result' => array('saved' => true, 'relationsCount' => 1),
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(
					'size' => 'tag_name'
				),
				'comment' => 'required, 1 valid related object'
			),
			array(
				'result' => array('saved' => false, 'relationsCount' => 1),
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(
					'size' => ''
				),
				'comment' => 'required, 1 invalid related object'
			),
			array(
				'result' => array('saved' => false, 'relationsCount' => 1),
				'relationOptions' => array('required' => true),
				'relationAttribute' => null,
				'comment' => 'required, 0 related objects'
			),
			// required=false
			array(
				'result' => array('saved' => true, 'relationsCount' => 1),
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'size' => 'tag_name'
				),
				'comment' => 'not required, 1 valid related object'
			),
			array(
				'result' => array('saved' => false, 'relationsCount' => 1),
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'size' => ''
				),
				'comment' => 'not required, 1 invalid related objects'
			),
			array(
				'result' => array('saved' => true, 'relationsCount' => 0),
				'relationOptions' => array('required' => false),
				'relationAttribute' => null,
				'comment' => 'not required, 0 related objects'
			),
		);
	}

	/**
	 * @covers WFormRelationHasOne::save
	 */
	public function testSaveIfNotSet()
	{
		$product = Product::model() ;
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'description' => array('required' => false),
			),
		));
		$product = $product->findByPk(1);
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'description' => array('required' => false),
			),
		));
		$product->afterFind(new CEvent($product));


		$this->assertEquals(true, $product->save());
		$this->assertNotEmpty($product->description);

		$product = Product::model();
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'description' => array('required' => false),
			),
		));
		$product = $product->with('description')->findByPk(1);
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'description' => array('required' => false),
			),
		));
		$product->afterFind(new CEvent($product));

		$this->assertEquals(true, $product->save());

		$this->assertEmpty($product->description);
	}

	/**
	 * @covers WFormRelationHasOne::getRelatedModel
	 */
	public function testGetRelatedModel()
	{
		$product = $this->_getProductWithRelation();
		$relation = WFormRelation::getInstance($product, 'description');

		$this->assertEmpty($relation->getRelatedModel(false));
//		$this->assertNotEmpty($relation->getRelatedModel(true));

		$product->attributes = array(
			'name' => 'product_name',
			'description' => array(
				'id' => 1,
				'size' => '10'
			),
		);

		$this->assertNotEmpty($relation->getRelatedModel());

		$product = $this->_getProductWithRelation(1);
		$relation = WFormRelation::getInstance($product, 'description');

		$this->assertNotEmpty($relation->getRelatedModel());
	}

	/**
	 * @covers WFormRelationHasOne::getActualRelatedModel
	 */
	public function testGetActualRelatedModel()
	{
		$product = $this->_getProductWithRelation(1, array('required' => false));
		$relation = WFormRelation::getInstance($product, 'description', array('required' => false));

		$this->assertNotEmpty($relation->getRelatedModel(false));
		$this->assertNotEmpty($relation->getActualRelatedModel());

		$product->attributes = array(
			'name' => 'name',
			'description' => null,
		);


		$this->assertNotEmpty($relation->getActualRelatedModel());
		$this->assertEmpty($relation->getRelatedModel(false));

		$product->attributes = array(
			'name' => 'name',
			'description' => array(
				'size' => '10',
			),
		);

		$this->assertNotEmpty($relation->getActualRelatedModel());
		$this->assertNotEmpty($relation->getRelatedModel(false));

	}

	/**
	 * WFormRelationHasOne::lazyDelete
	 * @dataProvider lazyDeleteProvider
	 */
	public function testLazyDelete($expectedResult, $relationOptions, $relationAttribute, $onFailComment = "")
	{
		$product = $this->_getProductWithRelation(1, $relationOptions);

		$product->attributes = array(
			'name' => 'name',
			'description' => $relationAttribute,
		);


		$this->assertTrue(empty($product->description) == ($expectedResult['relationsCount'] == 0), $onFailComment);

		$product->save();

		$this->assertTrue(empty($product->description) == ($expectedResult['relationsCount'] == 0), $onFailComment);

		$refreshedDescription = $product->getRelated('description', true);
		$this->assertTrue(empty($refreshedDescription) == ($expectedResult['relationsCount'] == 0), $onFailComment);


		$relatedIds = array();
		$model = $product->getRelated('description', true);
		if ($model)
			$relatedIds[] = $model->primaryKey;

		$this->assertTrue(in_array($expectedResult['oldId'], $relatedIds) == $expectedResult['containsOld']);
	}

	public function lazyDeleteProvider()
	{
		return array(
			// required=true
			array(
				'result' => array('relationsCount' => 1, 'oldId' => 1, 'containsOld' => true),
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'size' => '10x10'
				),
				'comment' => 'new description'
			),
			array(
				'result' => array('relationsCount' => 2, 'oldId' => 1, 'containsOld' => true),
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'id' => 1,
					'size' => '10x10'
				),
				'comment' => 'old description'
			),
			array(
				'result' => array('relationsCount' => 0, 'oldId' => 1, 'containsOld' => false),
				'relationOptions' => array('required' => false),
				'relationAttribute' => null,
				'comment' => 'empty description'
			),
		);
	}


	/**
	 * WFormRelationHasMany::delete
	 */
	public function testDelete()
	{
		$product = $this->_getProductWithRelation(1);

		$this->assertNotEmpty($product->description);
		$id = $product->description->primaryKey;
		$this->assertTrue($product->delete());
		$this->assertEmpty(ProductDescription::model()->findByPk($id));
	}

	/**
	 * WFormRelationHasMany::delete
	 */
	public function testDeleteWithoutCascade()
	{
		$product = $this->_getProductWithRelation(1, array('cascadeDelete' => false));

		$this->assertNotEmpty($product->description);
		$id = $product->description->primaryKey;
		$this->assertTrue($product->delete());
		$this->assertNotEmpty(ProductDescription::model()->findByPk($id));
	}

	/**
	 * @param null $id
	 * @param array $relationOptions
	 * @return Product
	 */
	protected function _getProductWithRelation($id = null, $relationOptions = array())
	{
		$product = $id ? Product::model()->findByPk($id) : new Product();
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'description' => $relationOptions,
			),
		));
		$product->afterConstruct(new CEvent($product));

		return $product;
	}
}