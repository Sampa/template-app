<?php

require_once 'C:\Server\home\wform\app\protected\extensions\wform\WFormBehavior.php';

/**
 * Test class for WFormBehavior.
 * Generated by PHPUnit on 2012-01-20 at 15:00:02.
 */
class WFormBehaviorTest extends PHPUnit_Framework_TestCase
{
	private $_connection;


	protected function setUp()
	{
		if (!extension_loaded('pdo') || !extension_loaded('pdo_sqlite'))
			$this->markTestSkipped('PDO and SQLite extensions are required.');

		$this->_connection = new CDbConnection('sqlite::memory:');
		$this->_connection->active = true;
		$this->_connection->pdoInstance->exec(file_get_contents(dirname(__FILE__) . '/../fixtures/data/sqlite.sql'));
		CActiveRecord::$db = $this->_connection;
	}


	protected function tearDown()
	{
		$this->_connection->active = false;
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testEvents().
	 */
	public function testEvents()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testAfterConstruct().
	 */
	public function testAfterConstruct()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testAfterFind().
	 */
	public function testAfterFind()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testUnsafeAttribute().
	 */
	public function testUnsafeAttribute()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testBeforeValidate().
	 */
	public function testBeforeValidate()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testAfterValidate().
	 */
	public function testAfterValidate()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testBeforeSave().
	 */
	public function testBeforeSave()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testAfterSave().
	 */
	public function testAfterSave()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testFindRelationByPath().
	 */
	public function testFindRelationByPath()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers {className}::{origMethodName}
	 * @todo Implement testFindPathAttribute().
	 */
	public function testFindPathAttribute()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers WFormBehavior::_buildRelatedModel
	 */
	public function testBuildRelatedModel()
	{

		$behavior = new WFormBehavior();
		$this->assertAttributeSame(null, 'relations', $behavior);
		$this->assertAttributeCount(0, 'relatedModels', $behavior);

		$method = new ReflectionMethod($behavior, '_buildRelatedModel');
		$method->setAccessible(true);

		$model = $this->getMockBuilder('CActiveRecord')
						->disableOriginalConstructor()
						->getMock();

		$model->expects($this->any())
				->method('relations')
				->will($this->returnValue(array(
					'hasOne' => array(CActiveRecord::HAS_ONE, 'SomeModel', 'key'),
					'hasMany' => array(CActiveRecord::HAS_MANY, 'SomeModel', 'key'),
					'manyMany' => array(CActiveRecord::MANY_MANY, 'SomeModel', 'key'),
					'belongsTo' => array(CActiveRecord::BELONGS_TO, 'SomeModel', 'key'),
					'stat' => array(CActiveRecord::STAT, 'SomeModel', 'key'),
		)));

		$method->invokeArgs($behavior, array($model));

		$this->assertAttributeCount(4, 'relations', $behavior);
		$this->assertAttributeCount(4, 'relatedModels', $behavior);

	}
}