<?php

/**
 * Test class for WFormRelationBelongsTo.
 * Generated by PHPUnit on 2012-01-20 at 15:03:13.
 */
class WFormRelationBelongsToTest extends PHPUnit_Framework_TestCase
{
	private $_connection;


	protected function setUp()
	{
		if(!extension_loaded('pdo') || !extension_loaded('pdo_sqlite'))
			$this->markTestSkipped('PDO and SQLite extensions are required.');

		$this->_connection = new CDbConnection('sqlite::memory:');
		$this->_connection->active = true;
		$this->_connection->pdoInstance->exec(file_get_contents(dirname(__FILE__).'/../fixtures/data/sqlite.sql'));
		CActiveRecord::$db = $this->_connection;
	}


	protected function tearDown()
	{
		$this->_connection->active=false;
	}

	/**
	 * @covers WFormRelationHasMany::setAttributes
	 */
	public function testSetAttributes()
	{
		$product = $this->_getProductWithRelation();

		$product->attributes = array(
			'name' => 'product_name',
			'category' => array(
				'name' => '12',
			),
		);

		$this->assertNotEmpty($product->category);
		$this->assertEquals('12', $product->category->name);

		$product->attributes = array(
			'name' => 'product_name',
		);
		$this->assertNotEmpty($product->category);

		$product->attributes = array(
			'name' => 'product_name',
			'category' => array(),
		);
		$this->assertTrue($product->category->isNewRecord);

		$product = $this->_getProductWithRelation(1);
		$this->assertNotEmpty($product->category);

		$product->attributes = array(
			'name' => 'product_name',
			'category' => array(
				'id' => 1,
			),
		);

		$this->assertNotEmpty($product->category);
		// check if exists category just updated
		$this->assertEquals('Auto', $product->category->name);
	}

	/**
	 * @covers WFormRelationHasOne::save
	 */
	public function testSaveIfNotSet()
	{
		$product = Product::model() ;
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'category' => array('required' => false),
			),
		));
		$product = $product->findByPk(1);
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'category' => array('required' => false),
			),
		));
		$product->afterFind(new CEvent($product));


		$this->assertEquals(true, $product->save());
		$this->assertNotEmpty($product->category);

		$product = Product::model();
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'category' => array('required' => false),
			),
		));
		$product = $product->with('category')->findByPk(1);
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'category' => array('required' => false),
			),
		));
		$product->afterFind(new CEvent($product));

		$this->assertEquals(true, $product->save());

		$this->assertNotEmpty($product->category);
	}

	/**
	 * @covers WFormRelationHasMany::validate
	 * @dataProvider validateProvider
	 */
	public function testValidate($expectedResult, $relationOptions, $relationAttribute, $onFailComment = "")
	{
		$product = $this->_getProductWithRelation(null, $relationOptions);

		$product->attributes = array(
			'name' => 'product_name',
			'category' => $relationAttribute,
		);

		$this->assertEquals($expectedResult, $product->validate(), $onFailComment);
	}

	public function validateProvider()
	{
		return array(
			// required=true
			array(
				'result' => true,
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(
					'name' => '12x12'
				),
				'comment' => 'required, 1 valid related object'
			),
			array(
				'result' => false,
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(
					'name' => ''
				),
				'comment' => 'required, 1 invalid related object'
			),
			array(
				'result' => false,
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(),
				'comment' => 'required, 0 related objects'
			),
			// required=false
			array(
				'result' => true,
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'name' => '12x12'
				),
				'comment' => 'not required, 1 valid related object'
			),
			array(
				'result' => false,
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'name' => ''
				),
				'comment' => 'not required, 1 invalid related objects'
			),
			array(
				'result' => true,
				'relationOptions' => array('required' => false),
				'relationAttribute' => null,
				'comment' => 'not required, 0 related objects'
			),
		);
	}

	/**
	 * @covers WFormRelationHasMany::save
	 * @dataProvider saveProvider
	 */
	public function testSave($expectedResult, $relationOptions, $relationAttribute, $onFailComment = "")
	{
		$product = $this->_getProductWithRelation(null, $relationOptions);

		$product->attributes = array(
			'name' => 'product_name',
			'category' => $relationAttribute,
		);

		$this->assertEquals($expectedResult['saved'], $product->save(), $onFailComment);
		if ($expectedResult['relationsCount'] > 0) {
			$this->assertNotEmpty($product->category, $onFailComment);
		} else {
			$this->assertEmpty($product->category, $onFailComment);
		}

	}

	public function saveProvider()
	{
		return array(
			// required=true
			array(
				'result' => array('saved' => true, 'relationsCount' => 1),
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(
					'name' => 'tag_name'
				),
				'comment' => 'required, 1 valid related object'
			),
			array(
				'result' => array('saved' => false, 'relationsCount' => 1),
				'relationOptions' => array('required' => true),
				'relationAttribute' => array(
					'name' => ''
				),
				'comment' => 'required, 1 invalid related object'
			),
			array(
				'result' => array('saved' => false, 'relationsCount' => 1),
				'relationOptions' => array('required' => true),
				'relationAttribute' => null,
				'comment' => 'required, 0 related objects'
			),
			// required=false
			array(
				'result' => array('saved' => true, 'relationsCount' => 1),
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'name' => 'tag_name'
				),
				'comment' => 'not required, 1 valid related object'
			),
			array(
				'result' => array('saved' => false, 'relationsCount' => 1),
				'relationOptions' => array('required' => false),
				'relationAttribute' => array(
					'name' => ''
				),
				'comment' => 'not required, 1 invalid related objects'
			),
			array(
				'result' => array('saved' => true, 'relationsCount' => 0),
				'relationOptions' => array('required' => false),
				'relationAttribute' => null,
				'comment' => 'not required, 0 related objects'
			),
		);
	}

	/**
	 * @covers WFormRelationHasMany::getRelatedModel
	 */
	public function testGetRelatedModel()
	{
		$product = $this->_getProductWithRelation();
		$relation = WFormRelation::getInstance($product, 'category');

		$this->assertEmpty($relation->getRelatedModel(false));
//		$this->assertNotEmpty($relation->getRelatedModel(true));

		$product->attributes = array(
			'name' => 'product_name',
			'category' => array(
				'id' => 1,
				'name' => '10'
			),
		);

		$this->assertNotEmpty($relation->getRelatedModel());

		$product = $this->_getProductWithRelation(1);
		$relation = WFormRelation::getInstance($product, 'category');

		$this->assertNotEmpty($relation->getRelatedModel());
	}

	/**
	 * @param null $id
	 * @param array $relationOptions
	 * @return Product
	 */
	protected function _getProductWithRelation($id = null, $relationOptions = array())
	{
		$product = $id ? Product::model()->findByPk($id) : new Product();
		$product->attachBehavior('wform', array(
			'class' => 'WFormBehavior',
			'relations' => array(
				'category' => $relationOptions,
			),
		));
		$product->afterConstruct(new CEvent($product));

		return $product;
	}
}